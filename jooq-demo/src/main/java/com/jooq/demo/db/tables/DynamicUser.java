/*
 * This file is generated by jOOQ.
 */
package com.jooq.demo.db.tables;


import com.jooq.demo.db.Keys;
import com.jooq.demo.db.Test;
import com.jooq.demo.db.tables.records.DynamicUserRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DynamicUser extends TableImpl<DynamicUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>test.dynamic_user</code>
     */
    public static final DynamicUser DYNAMIC_USER = new DynamicUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DynamicUserRecord> getRecordType() {
        return DynamicUserRecord.class;
    }

    /**
     * The column <code>test.dynamic_user.id</code>.
     */
    public final TableField<DynamicUserRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>test.dynamic_user.name</code>.
     */
    public final TableField<DynamicUserRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>test.dynamic_user.gender</code>.
     */
    public final TableField<DynamicUserRecord, Byte> GENDER = createField(DSL.name("gender"), SQLDataType.TINYINT, this, "");

    private DynamicUser(Name alias, Table<DynamicUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private DynamicUser(Name alias, Table<DynamicUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>test.dynamic_user</code> table reference
     */
    public DynamicUser(String alias) {
        this(DSL.name(alias), DYNAMIC_USER);
    }

    /**
     * Create an aliased <code>test.dynamic_user</code> table reference
     */
    public DynamicUser(Name alias) {
        this(alias, DYNAMIC_USER);
    }

    /**
     * Create a <code>test.dynamic_user</code> table reference
     */
    public DynamicUser() {
        this(DSL.name("dynamic_user"), null);
    }

    public <O extends Record> DynamicUser(Table<O> child, ForeignKey<O, DynamicUserRecord> key) {
        super(child, key, DYNAMIC_USER);
    }

    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    @Override
    public Identity<DynamicUserRecord, Integer> getIdentity() {
        return (Identity<DynamicUserRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DynamicUserRecord> getPrimaryKey() {
        return Keys.KEY_DYNAMIC_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<DynamicUserRecord>> getKeys() {
        return Arrays.<UniqueKey<DynamicUserRecord>>asList(Keys.KEY_DYNAMIC_USER_PRIMARY);
    }

    @Override
    public DynamicUser as(String alias) {
        return new DynamicUser(DSL.name(alias), this);
    }

    @Override
    public DynamicUser as(Name alias) {
        return new DynamicUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DynamicUser rename(String name) {
        return new DynamicUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DynamicUser rename(Name name) {
        return new DynamicUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Byte> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
